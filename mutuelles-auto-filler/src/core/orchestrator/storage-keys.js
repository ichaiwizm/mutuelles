/**
 * Gestionnaire des cl√©s de stockage - Support pour traitement parall√®le multi-onglets
 * 
 * Ce module centralise la logique de suffixage des cl√©s de storage pour permettre
 * le traitement parall√®le de leads sur plusieurs onglets sans collision.
 */

/**
 * Extrait le groupId depuis l'URL courante
 * @returns {string} Le groupId ou 'default' si aucun groupId n'est trouv√©
 */
export function getGroupIdFromLocation() {
  try {
    // Parser l'URL pour extraire le param√®tre groupId apr√®s le hash
    const hash = window.location.hash || '';
    const queryPart = hash.split('?')[1] || '';
    
    if (!queryPart) {
      return 'default';
    }
    
    const params = new URLSearchParams(queryPart);
    const groupId = params.get('groupId');
    
    return groupId || 'default';
  } catch (error) {
    console.warn('‚ö†Ô∏è [STORAGE-KEYS] Erreur parsing groupId:', error);
    return 'default';
  }
}

/**
 * G√©n√®re une cl√© de storage suffix√©e par le groupId
 * @param {string} baseKey - La cl√© de base (ex: 'swisslife_leads')
 * @param {string} [groupId] - Le groupId √† utiliser (optionnel, d√©tect√© auto sinon)
 * @returns {string} La cl√© suffix√©e ou la cl√© de base si groupId='default'
 */
export function getStorageKey(baseKey, groupId = null) {
  const actualGroupId = groupId || getGroupIdFromLocation();
  
  // Si c'est le groupId par d√©faut, pas de suffixage (backward compatibility)
  if (actualGroupId === 'default') {
    return baseKey;
  }
  
  // Suffixer la cl√© avec le groupId
  return `${baseKey}__${actualGroupId}`;
}

/**
 * Helper pour d√©bugger les cl√©s utilis√©es
 * @param {string} baseKey - La cl√© de base
 * @returns {object} Informations de d√©bugging
 */
export function debugStorageKey(baseKey) {
  const groupId = getGroupIdFromLocation();
  const finalKey = getStorageKey(baseKey, groupId);
  
  return {
    groupId,
    baseKey,
    finalKey,
    isDefault: groupId === 'default',
    location: window.location.hash
  };
}

/**
 * Constantes des cl√©s de storage avec helpers
 * Utiliser ces fonctions plut√¥t que les cha√Ænes hardcod√©es
 */
export const KEYS = {
  // Cl√©s principales
  LEADS: (groupId = null) => getStorageKey('swisslife_leads', groupId),
  QUEUE_STATE: (groupId = null) => getStorageKey('swisslife_queue_state', groupId),
  
  // Cl√©s pour retry et statuts
  RETRIES: (groupId = null) => getStorageKey('swisslife_lead_retries', groupId),
  PROCESSING_STATUS: (groupId = null) => getStorageKey('swisslife_processing_status', groupId),
  
  // Configuration
  AUTOMATION_CONFIG: () => 'automation_config', // Non suffix√©e (partag√©e entre tous)
  
  // Debug helpers
  debug: (baseKey) => debugStorageKey(baseKey),
  groupId: () => getGroupIdFromLocation()
};

/**
 * Utilitaire pour migrer des donn√©es d'une ancienne cl√© vers la nouvelle
 * Utile pour le processus de migration
 * @param {string} oldKey - Ancienne cl√©
 * @param {string} newKey - Nouvelle cl√©
 * @returns {Promise<boolean>} true si migration effectu√©e
 */
export async function migrateStorageKey(oldKey, newKey) {
  try {
    const result = await chrome.storage.local.get([oldKey]);
    
    if (result[oldKey]) {
      // Copier vers la nouvelle cl√©
      await chrome.storage.local.set({ [newKey]: result[oldKey] });
      
      // Supprimer l'ancienne cl√©
      await chrome.storage.local.remove([oldKey]);
      
      console.log(`‚úÖ [STORAGE-KEYS] Migration ${oldKey} ‚Üí ${newKey}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå [STORAGE-KEYS] Erreur migration:', error);
    return false;
  }
}

/**
 * Nettoie toutes les cl√©s suffix√©es pour un groupId donn√©
 * Utile en fin de traitement pour √©viter l'accumulation de donn√©es
 * @param {string} groupId - Le groupId √† nettoyer
 * @returns {Promise<number>} Nombre de cl√©s supprim√©es
 */
export async function cleanupGroupKeys(groupId) {
  if (groupId === 'default') {
    console.warn('‚ö†Ô∏è [STORAGE-KEYS] Nettoyage du groupe "default" non autoris√©');
    return 0;
  }
  
  try {
    const allKeys = await chrome.storage.local.get(null);
    const keysToRemove = Object.keys(allKeys).filter(key => key.endsWith(`__${groupId}`));
    
    if (keysToRemove.length > 0) {
      await chrome.storage.local.remove(keysToRemove);
      console.log(`üßπ [STORAGE-KEYS] Nettoyage ${keysToRemove.length} cl√©s pour groupId: ${groupId}`, keysToRemove);
    }
    
    return keysToRemove.length;
  } catch (error) {
    console.error('‚ùå [STORAGE-KEYS] Erreur nettoyage:', error);
    return 0;
  }
}