{
  "metadata": {
    "version": "1.0.0",
    "provider": "SwissLife",
    "description": "Configuration SwissLife pour automatisation du remplissage de formulaires",
    "lastUpdated": "2025-08-18T00:00:00.000Z"
  },
  
  "executionOrder": [
    "project",
    "hospitalisation", 
    "simulationType",
    "principalInsured",
    "children",
    "spouse",
    "loiMadelin",
    "cancellation",
    "competition"
  ],
  
  "globalSettings": {
    "frameSelector": "iframe[src*='oav-pool2']",
    "defaultWaitTime": 100,
    "overlaySelector": ".blockUI.blockOverlay, .blockUI.blockMsg",
    "maxRetries": 3,
    "debugMode": false
  },
  
  "sections": {
    
    "project": {
      "enabled": true,
      "order": 1,
      "fields": {
        "nom": {
          "selector": {
            "primary": "#nom-projet",
            "fallbacks": [
              "input[type='text']:first",
              "input[placeholder*='projet']",
              "input[id*='projet']"
            ]
          },
          "action": {
            "type": "input",
            "method": "setValue",
            "waitAfter": 100
          },
          "validation": {
            "required": true,
            "format": "text"
          }
        }
      }
    },
    
    "hospitalisation": {
      "enabled": true,
      "order": 2,
      "fields": {
        "confortHospitalisation": {
          "selector": {
            "primary": "#projet-confort-hospitalisation-non",
            "fallbacks": [
              "input[type='radio'][value*='non']",
              "label:contains('Non') input[type='radio']"
            ]
          },
          "action": {
            "type": "click",
            "method": "clickSequence",
            "waitAfter": 200,
            "waitStable": {
              "enabled": true,
              "minQuiet": 400,
              "maxWait": 6000
            }
          },
          "validation": {
            "required": true,
            "customValidator": "checkRadioSelected"
          },
          "options": {
            "oui": "#projet-confort-hospitalisation-oui",
            "non": "#projet-confort-hospitalisation-non"
          }
        }
      }
    },
    
    "simulationType": {
      "enabled": true,
      "order": 3,
      "critical": true,
      "fields": {
        "type": {
          "selector": {
            "primary": "input[type='radio'][name*='simulation']",
            "fallbacks": [
              "select option:contains('Individuel')",
              "input[type='radio']:has(+ label:contains('Individuel'))"
            ]
          },
          "action": {
            "type": "click",
            "method": "clickSequence", 
            "waitAfter": 200,
            "waitStable": {
              "enabled": true,
              "minQuiet": 350,
              "maxWait": 5000
            }
          },
          "validation": {
            "required": true,
            "customValidator": "checkSimulationType"
          },
          "options": {
            "individuel": ["individu", "individual", "seul"],
            "couple": ["couple", "pour le couple", "conjoint"]
          }
        }
      },
      "postActions": [
        {
          "type": "wait",
          "waitStable": {
            "enabled": true,
            "minQuiet": 350,
            "maxWait": 5000
          }
        }
      ]
    },
    
    "principalInsured": {
      "enabled": true,
      "order": 4,
      "fields": {
        "dateNaissance": {
          "selector": {
            "primary": "#date-naissance-assure-principal",
            "fallbacks": [
              "[name=\"assurePrincipal.dateNaissance\"]",
              "input[id*='principal'][id*='naiss']",
              "input[placeholder*='naissance']"
            ]
          },
          "action": {
            "type": "input",
            "method": "humanType",
            "waitAfter": 150,
            "waitStable": {
              "enabled": true,
              "minQuiet": 300,
              "maxWait": 4000
            }
          },
          "validation": {
            "required": true,
            "format": "date",
            "pattern": "^\\d{2}/\\d{2}/\\d{4}$"
          }
        },
        "departement": {
          "selector": {
            "primary": "#departement-assure-principal",
            "fallbacks": [
              "[name=\"assurePrincipal.departement\"]",
              "select[id*='principal'][id*='depart']",
              "select option:contains('75')"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 100
          },
          "validation": {
            "required": true,
            "pattern": "^(\\d{2}|2[AB])$"
          }
        },
        "regimeSocial": {
          "selector": {
            "primary": "#regime-social-assure-principal",
            "fallbacks": [
              "[name=\"assurePrincipal.regimeSocial\"]",
              "select[id*='principal'][id*='regime']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 200,
            "waitStable": {
              "enabled": true,
              "minQuiet": 400,
              "maxWait": 5000
            }
          },
          "validation": {
            "required": true
          },
          "enum": {
            "values": [
              "SECURITE_SOCIALE",
              "SECURITE_SOCIALE_ALSACE_MOSELLE", 
              "TNS",
              "AMEXA",
              "AUTRES_REGIME_SPECIAUX"
            ],
            "aliases": {
              "securite sociale": "SECURITE_SOCIALE",
              "rg cpam": "SECURITE_SOCIALE",
              "alsace moselle": "SECURITE_SOCIALE_ALSACE_MOSELLE",
              "tns": "TNS",
              "travailleur non salarie": "TNS",
              "amexa": "AMEXA",
              "autres": "AUTRES_REGIME_SPECIAUX"
            }
          }
        },
        "statut": {
          "selector": {
            "primary": "#statut-assure-principal",
            "fallbacks": [
              "[name=\"assurePrincipal.statut\"]",
              "select[id*='principal'][id*='statut']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 200,
            "waitStable": {
              "enabled": true,
              "minQuiet": 300,
              "maxWait": 4000
            }
          },
          "validation": {
            "required": true
          },
          "dependencies": ["regimeSocial"],
          "enum": {
            "values": [
              "TNS", "RETRAITE", "SALARIE", "SALARIE_AGRICOLE",
              "EXPLOITANT_AGRICOLE", "ETUDIANT", "RETRAITE_ANCIEN_SALARIE",
              "RETRAITE_ANCIEN_EXPLOITANT", "TRAVAILLEUR_TRANSFRONTALIER",
              "FONCTIONNAIRE"
            ],
            "aliases": {
              "travailleur non salarie": "TNS",
              "retraite": "RETRAITE",
              "salarie": "SALARIE",
              "etudiant": "ETUDIANT",
              "fonctionnaire": "FONCTIONNAIRE"
            }
          }
        },
        "profession": {
          "selector": {
            "primary": "#profession-assure-principal",
            "fallbacks": [
              "[name=\"assurePrincipal.profession\"]",
              "select[id*='principal'][id*='profes']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 100
          },
          "validation": {
            "required": false
          },
          "dependencies": ["regimeSocial", "statut"],
          "conditional": {
            "showIf": [
              {
                "field": "regimeSocial",
                "operator": "equals",
                "value": "TNS"
              }
            ]
          },
          "enum": {
            "values": ["MEDECIN", "CHIRURGIEN", "CHIRURGIEN_DENTISTE", "PHARMACIEN", "AUXILIAIRE_MEDICAL", "AUTRE"],
            "aliases": {
              "non medicale": "AUTRE",
              "autre": "AUTRE",
              "auxiliaire medical": "AUXILIAIRE_MEDICAL",
              "chirurgien dentiste": "CHIRURGIEN_DENTISTE"
            }
          }
        }
      }
    },
    
    "children": {
      "enabled": true,
      "order": 5,
      "expandSection": {
        "required": true,
        "selectors": [
          "button:contains('enfant')",
          ".panel-heading:contains('Enfant')",
          "[role='button']:contains('enfant')",
          "a:contains('Ayants droit')"
        ]
      },
      "fields": {
        "nombre": {
          "selector": {
            "primary": "#sante-nombre-enfant-assures",
            "fallbacks": [
              "#nb-enfant-moins-20-ans",
              "select[id*='enfant'][id*='nombre']",
              "select option:contains('0'):parent"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 300,
            "waitStable": {
              "enabled": true,
              "minQuiet": 500,
              "maxWait": 7000
            }
          },
          "validation": {
            "required": true,
            "format": "number"
          }
        },
        "enfants": [
          {
            "index": 0,
            "dateNaissance": {
              "selector": {
                "primary": "#contrat-enfants-0-date-naissance",
                "fallbacks": [
                  "[name=\"contrat.enfants[0].dateNaissance\"]",
                  "[name=\"contratSante.enfants[0].dateNaissance\"]",
                  "input[id*='enfant'][id*='0'][id*='naiss']"
                ]
              },
              "action": {
                "type": "input",
                "method": "humanType",
                "waitAfter": 100
              },
              "validation": {
                "required": true,
                "format": "date"
              }
            },
            "ayantDroit": {
              "selector": {
                "primary": "#enfants-0-idAyantDroit",
                "fallbacks": [
                  "[name=\"contrat.enfants[0].idAyantDroit\"]",
                  "[name=\"contratSante.enfants[0].idAyantDroit\"]",
                  "select[id*='ayant'][id*='0']"
                ]
              },
              "action": {
                "type": "select",
                "method": "setValue"
              },
              "validation": {
                "required": true
              },
              "enum": {
                "values": ["CLIENT", "CONJOINT"],
                "aliases": {
                  "assure principal": "CLIENT",
                  "titulaire": "CLIENT",
                  "conjoint": "CONJOINT",
                  "partenaire": "CONJOINT"
                }
              }
            }
          },
          {
            "index": 1,
            "dateNaissance": {
              "selector": {
                "primary": "#contrat-enfants-1-date-naissance",
                "fallbacks": [
                  "[name=\"contrat.enfants[1].dateNaissance\"]",
                  "[name=\"contratSante.enfants[1].dateNaissance\"]",
                  "input[id*='enfant'][id*='1'][id*='naiss']"
                ]
              },
              "action": {
                "type": "input",
                "method": "humanType",
                "waitAfter": 100
              },
              "validation": {
                "required": true,
                "format": "date"
              }
            },
            "ayantDroit": {
              "selector": {
                "primary": "#enfants-1-idAyantDroit",
                "fallbacks": [
                  "[name=\"contrat.enfants[1].idAyantDroit\"]",
                  "[name=\"contratSante.enfants[1].idAyantDroit\"]",
                  "select[id*='ayant'][id*='1']"
                ]
              },
              "action": {
                "type": "select",
                "method": "setValue"
              },
              "validation": {
                "required": true
              },
              "enum": {
                "values": ["CLIENT", "CONJOINT"],
                "aliases": {
                  "assure principal": "CLIENT",
                  "titulaire": "CLIENT",
                  "conjoint": "CONJOINT",
                  "partenaire": "CONJOINT"
                }
              }
            }
          },
          {
            "index": 2,
            "dateNaissance": {
              "selector": {
                "primary": "#contrat-enfants-2-date-naissance",
                "fallbacks": [
                  "[name=\"contrat.enfants[2].dateNaissance\"]",
                  "[name=\"contratSante.enfants[2].dateNaissance\"]",
                  "input[id*='enfant'][id*='2'][id*='naiss']"
                ]
              },
              "action": {
                "type": "input",
                "method": "humanType",
                "waitAfter": 100
              },
              "validation": {
                "required": true,
                "format": "date"
              }
            },
            "ayantDroit": {
              "selector": {
                "primary": "#enfants-2-idAyantDroit",
                "fallbacks": [
                  "[name=\"contrat.enfants[2].idAyantDroit\"]",
                  "[name=\"contratSante.enfants[2].idAyantDroit\"]",
                  "select[id*='ayant'][id*='2']"
                ]
              },
              "action": {
                "type": "select",
                "method": "setValue"
              },
              "validation": {
                "required": true
              },
              "enum": {
                "values": ["CLIENT", "CONJOINT"],
                "aliases": {
                  "assure principal": "CLIENT",
                  "titulaire": "CLIENT",
                  "conjoint": "CONJOINT",
                  "partenaire": "CONJOINT"
                }
              }
            }
          }
        ]
      }
    },
    
    "spouse": {
      "enabled": true,
      "order": 6,
      "conditional": {
        "enabledIf": [
          {
            "field": "simulationType.type",
            "operator": "equals",
            "value": "couple"
          }
        ]
      },
      "navigation": {
        "required": true,
        "tabSelector": {
          "primary": "#tab-conjoint",
          "fallbacks": [
            "#onglet-conjoint",
            "a[href*='conjoint']",
            "button:contains('Conjoint')",
            "[data-target*='conjoint']"
          ]
        }
      },
      "fields": {
        "dateNaissance": {
          "selector": {
            "primary": "#date-naissance-assure-conjoint",
            "fallbacks": [
              "[name=\"conjoint.dateNaissance\"]",
              "input[id*='conjoint'][id*='naiss']"
            ]
          },
          "action": {
            "type": "input",
            "method": "humanType",
            "waitAfter": 150
          },
          "validation": {
            "required": true,
            "format": "date"
          }
        },
        "regimeSocial": {
          "selector": {
            "primary": "#regime-social-assure-conjoint",
            "fallbacks": [
              "[name=\"conjoint.regimeSocial\"]",
              "select[id*='conjoint'][id*='regime']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 200
          },
          "validation": {
            "required": true
          },
          "enum": {
            "values": [
              "SECURITE_SOCIALE",
              "SECURITE_SOCIALE_ALSACE_MOSELLE", 
              "TNS",
              "AMEXA",
              "AUTRES_REGIME_SPECIAUX"
            ],
            "aliases": {
              "securite sociale": "SECURITE_SOCIALE",
              "rg cpam": "SECURITE_SOCIALE",
              "alsace moselle": "SECURITE_SOCIALE_ALSACE_MOSELLE",
              "tns": "TNS",
              "amexa": "AMEXA"
            }
          }
        },
        "statut": {
          "selector": {
            "primary": "#statut-assure-conjoint",
            "fallbacks": [
              "[name=\"conjoint.statut\"]",
              "select[id*='conjoint'][id*='statut']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 200
          },
          "validation": {
            "required": true
          },
          "dependencies": ["regimeSocial"],
          "enum": {
            "values": [
              "SALARIE", "TNS", "RETRAITE", "ETUDIANT", "FONCTIONNAIRE",
              "SALARIE_AGRICOLE", "EXPLOITANT_AGRICOLE"
            ],
            "aliases": {
              "salarie": "SALARIE",
              "travailleur non salarie": "TNS",
              "retraite": "RETRAITE",
              "etudiant": "ETUDIANT",
              "fonctionnaire": "FONCTIONNAIRE"
            }
          }
        },
        "profession": {
          "selector": {
            "primary": "#profession-assure-conjoint",
            "fallbacks": [
              "[name=\"conjoint.profession\"]",
              "select[id*='conjoint'][id*='profes']"
            ]
          },
          "action": {
            "type": "select",
            "method": "setValue",
            "waitAfter": 100
          },
          "validation": {
            "required": false
          },
          "dependencies": ["regimeSocial", "statut"]
        }
      }
    },
    
    "loiMadelin": {
      "enabled": true,
      "order": 7,
      "conditional": {
        "enabledIf": [
          {
            "field": "principalInsured.statut",
            "operator": "equals",
            "value": "TNS"
          }
        ]
      },
      "fields": {
        "applicable": {
          "selector": {
            "primary": "input[type='radio'][name*='madelin'][value='non']",
            "fallbacks": [
              "input[type='radio']:has(+ label:contains('Non'))",
              "label:contains('Non applicable') input[type='radio']"
            ]
          },
          "action": {
            "type": "click",
            "method": "clickSequence",
            "waitAfter": 200
          },
          "validation": {
            "required": true
          }
        }
      }
    },
    
    "cancellation": {
      "enabled": true,
      "order": 8,
      "fields": {
        "hasContract": {
          "selector": {
            "primary": "input[type='radio'][name*='resiliation'][value='non']",
            "fallbacks": [
              "input[type='radio']:has(+ label:contains('Non'))",
              "label:contains('Je n\\'ai pas') input[type='radio']"
            ]
          },
          "action": {
            "type": "click",
            "method": "clickSequence",
            "waitAfter": 200
          },
          "validation": {
            "required": true
          }
        }
      }
    },
    
    "competition": {
      "enabled": true,
      "order": 9,
      "fields": {
        "hasCompetitorContract": {
          "selector": {
            "primary": "input[type='radio'][name*='concurrence'][value='non']",
            "fallbacks": [
              "input[type='radio']:has(+ label:contains('Non'))",
              "label:contains('Aucune reprise') input[type='radio']"
            ]
          },
          "action": {
            "type": "click",
            "method": "clickSequence",
            "waitAfter": 200
          },
          "validation": {
            "required": true
          }
        }
      }
    }
  },
  
  "workflows": {
    "individuel": {
      "sections": [
        "project", 
        "hospitalisation", 
        "simulationType", 
        "principalInsured", 
        "loiMadelin", 
        "cancellation", 
        "competition"
      ]
    },
    "couple": {
      "sections": [
        "project", 
        "hospitalisation", 
        "simulationType", 
        "principalInsured", 
        "spouse", 
        "loiMadelin", 
        "cancellation", 
        "competition"
      ]
    },
    "coupleAvecEnfants": {
      "sections": [
        "project", 
        "hospitalisation", 
        "simulationType", 
        "principalInsured", 
        "children", 
        "spouse", 
        "loiMadelin", 
        "cancellation", 
        "competition"
      ]
    }
  },
  
  "errorHandling": {
    "retryAttempts": 3,
    "retryDelay": 1000,
    "fallbackStrategies": {
      "elementNotFound": "skip",
      "elementNotVisible": "scroll_and_retry",
      "validationFailed": "retry_with_fallback"
    }
  }
}