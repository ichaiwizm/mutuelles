/**
 * Service principal du conjoint - Orchestrateur
 * Point d'entr√©e principal qui coordonne tous les modules conjoint
 */

import { isVisible } from '../../utils/dom-utils.js';
import { 
  findConjointTab,
  openConjointTab
} from './core/conjoint-detector.js';
import { 
  normalizeConjointConfig,
  checkConjointValues,
  diagnoseConjointIssues,
  DEFAULT_CONFIG 
} from './core/conjoint-mapper.js';
import { 
  readAllConjointValues,
  checkConjointReadiness
} from './operations/conjoint-reader.js';
import { fillAllConjointFields } from './operations/conjoint-filler.js';
import { success, error, ERROR_CODES } from '../../utils/response-format.js';

/**
 * Lit toutes les informations conjoint actuelles
 */
export function readAll() {
  try {
    const data = readAllConjointValues();
    return success(data);
  } catch (err) {
    console.error('‚ùå Erreur lecture conjoint:', err);
    return error(ERROR_CODES.READ_ERROR, 'Erreur lors de la lecture des donn√©es conjoint', err);
  }
}

/**
 * V√©rifie si les √©l√©ments conjoint sont pr√™ts
 */
export function readyCheck() {
  try {
    const isReady = checkConjointReadiness();
    return success({ ready: isReady });
  } catch (err) {
    console.error('‚ùå Erreur v√©rification readiness conjoint:', err);
    return error(ERROR_CODES.VALIDATION_ERROR, 'Erreur lors de la v√©rification de disponibilit√©', err);
  }
}

/**
 * Remplit tous les champs conjoint
 */
export async function fillAll(cfg = DEFAULT_CONFIG) {
  try {
    const result = await fillAllConjointFields(cfg);
    
    // Si le r√©sultat a d√©j√† le format uniforme, on le retourne tel quel
    if (result && typeof result === 'object' && ('success' in result || 'error' in result)) {
      return result;
    }
    
    // Sinon on l'encapsule dans success
    if (result && result.ok !== false) {
      return success({ actions: result.actions || [], data: result });
    } else {
      return error(ERROR_CODES.FILL_ERROR, 'Erreur lors du remplissage', result);
    }
  } catch (err) {
    console.error('‚ùå Erreur remplissage conjoint:', err);
    return error(ERROR_CODES.FILL_ERROR, 'Erreur lors du remplissage des champs conjoint', err);
  }
}

/**
 * Alias pour compatibilit√© avec le bridge orchestrateur
 */
export async function fill(cfg) {
  return await fillAll(cfg);
}

/**
 * V√©rifie les valeurs par rapport aux attentes
 */
export function checkAll(cfg = DEFAULT_CONFIG) {
  try {
    const currentValuesResult = readAll();
    if (!currentValuesResult.ok) {
      return currentValuesResult; // Propagate l'erreur de lecture
    }
    
    const checkResult = checkConjointValues(currentValuesResult.data, cfg);
    
    // Analyser les r√©sultats de v√©rification
    const allOk = Array.isArray(checkResult) ? checkResult.every(r => r.ok) : checkResult.ok;
    
    if (allOk) {
      return success({ valid: true, checks: checkResult });
    } else {
      return error(ERROR_CODES.VALIDATION_ERROR, 'Validation √©chou√©e', { checks: checkResult });
    }
  } catch (err) {
    console.error('‚ùå Erreur v√©rification conjoint:', err);
    return error(ERROR_CODES.VALIDATION_ERROR, 'Erreur lors de la v√©rification', err);
  }
}

/**
 * Diagnostique d√©taill√© des probl√®mes conjoint
 */
export function diagnose(cfg = DEFAULT_CONFIG) {
  try {
    const tab = findConjointTab();
    const readinessResult = readyCheck();
    const currentStateResult = readAll();
    
    if (!readinessResult.ok) {
      return readinessResult; // Propagate l'erreur de readiness
    }
    
    if (!currentStateResult.ok) {
      return currentStateResult; // Propagate l'erreur de lecture
    }
    
    const diagnosis = diagnoseConjointIssues(
      !!tab, 
      tab ? isVisible(tab) : false, 
      readinessResult.data.ready, 
      currentStateResult.data
    );
    
    return success({ diagnosis });
  } catch (err) {
    console.error('‚ùå Erreur diagnostic conjoint:', err);
    return error(ERROR_CODES.DIAGNOSTIC_ERROR, 'Erreur lors du diagnostic', err);
  }
}

/**
 * Workflow complet - Remplit et v√©rifie
 */
export async function runAll(cfg = DEFAULT_CONFIG) {
  try {
    console.log("üîÑ D√©but remplissage conjoint...");
    
    const fillResult = await fillAll(cfg);
    if (!fillResult.ok) {
      console.error("‚ùå √âchec remplissage:", fillResult);
      return fillResult;
    }
    
    console.log("‚úÖ Remplissage OK:", fillResult.data?.actions || fillResult.data);
    
    const checkResult = checkAll(cfg);
    if (!checkResult.ok) {
      console.log("‚ö†Ô∏è Erreurs de validation d√©tect√©es");
      const diag = diagnose(cfg);
      if (diag.ok) {
        console.table(diag.data.diagnosis?.issues || diag.data.diagnosis);
      }
      return checkResult;
    }
    
    console.log("‚úÖ V√©rifications OK");
    
    return success({ 
      fillResult: fillResult.data, 
      checkResult: checkResult.data, 
      allOk: true 
    });
  } catch (err) {
    console.error('‚ùå Erreur workflow conjoint:', err);
    return error(ERROR_CODES.WORKFLOW_ERROR, 'Erreur lors du workflow complet', err);
  }
}

// Export des fonctions individuelles pour compatibilit√©
export { openConjointTab } from './core/conjoint-detector.js';

// Export de l'API compl√®te
export default {
  openConjointTab,
  fillAll,
  fill,  // Ajout pour compatibilit√© bridge
  readAll,
  checkAll,
  diagnose,
  runAll,
  readyCheck
};